#!/usr/bin/env python3
import argparse
import boto3
import botocore
import os
import sys
from ipaddress import ip_network, ip_address
from requests import get

from botocore.exceptions import ClientError


def main(args):
    execute(parse_args(args))


def parse_args(args):
    parser = argparse.ArgumentParser(
        description='Maintains a list of whitelisted CIDR blocks granted SSH access to AWS via a '
                    'security group.'
    )
    parser.add_argument(
        '--list', action='store_const', dest='action', const='list',
        help='Lists the ip addresses in the security group with SSH access.'
    )
    parser.add_argument(
        '--sgid', default=os.environ.get('AWSWL_SGID'),
        help='The security group to use for SSH access.'
    )
    parser.add_argument(
        '--ssh-port', default=22,
        help='The port used for SSH. By default this is port 22, but some people '
             'prefer to access SSH over another port.'
    )
    # TODO: What happens if store_const is called twice for the same dest?
    # TODO: Add, Remove, A:qdd Current, Remove Current
    return parser.parse_args(args)


def execute(options):
    if validate_options(options):
        if options.action == 'list':
            list_authorized(options)
        else:
            print("Action: {0}".format(options.action))

def validate_options(options):
    if not options.sgid:
        print( "No security group specified as an argument with --sgid or in the environment as AWSWL_SGID. Cannot proceed." )
        return False
    return True


def get_external_ip():
    return get('https://api.ipify.org').text

def list_authorized(options):
    external_ip = ip_address(get_external_ip())
    try:
        ec2 = boto3.resource('ec2')
        security_group = ec2.SecurityGroup(options.sgid)
        ssh_permissions = [
            permission
            for permission in security_group.ip_permissions
            if permission['IpProtocol'] == 'tcp' and permission['ToPort'] == options.ssh_port
        ]
        authorized_blocks = [
            ip_network(ip_range['CidrIp'])
            for permission in ssh_permissions
            for ip_range in permission['IpRanges']
        ]
        authorized_blocks += [
            ip_network(ip_range['CidrIpv6'])
            for permission in ssh_permissions
            for ip_range in permission['Ipv6Ranges']
        ]
        if authorized_blocks:
            print("The following CIDR blocks are authorized for SSH:")
            for block in authorized_blocks:
                if external_ip in block:
                    print("- {0} (current)".format(block))
                else:
                    print("- {0}".format(block))
        else:
            print("No CIDR blocks authorized for SSH.")
    except botocore.exceptions.NoRegionError as nre:
        print("No AWS region specified (AWS configuration/environment variables).")
    except ClientError as e:
        print(e)


if __name__ == '__main__':
    main(sys.argv[1:])
